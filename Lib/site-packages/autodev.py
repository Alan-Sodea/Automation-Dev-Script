import sys, os, time , zipfile

def main():
    if (len(sys.argv) == 1):
        print("Expected argument for project name")
        exit(0)
    elif (len(sys.argv) == 2):
        if (sys.argv[1] == '-help')or(sys.argv[1] == '-h'):
            print("\n\n\tautodev [action] [project-name] [project-type]\n\n")
            print("action       : \t'create' to create a project")
            print("               \t'run' to run a project\n")

            print("project-name : \tEnter a valid project name who contains alphanumerical caracters or underscore\n")

            print("project-type : \t'js' for a javascript project")
            print("             : \t'cpp' for a C++ project")
            print("             : \t'clang' for a C project")
            print("             : \t'cs' for a C# project")
            print("             : \t'web3' for a Web 3 project")
            print("             : \t'node' for a nodejs project")
            print("             : \t'kp' for a kpiro project")


        else:
            print("Expected argument for action type")
        sys.exit(0)

    elif (len(sys.argv) == 3):
        print("Expected argument for project type")
        sys.exit(0)
    else:
        action = sys.argv[1]
        args = sys.argv[3:]
        project_name = sys.argv[2]
        if action == 'run':
            if (args[0] == "web3"):
                print("Just open the html file...")
            elif (args[0] == "node"):
                try:
                    os.system("nodemon start")
                except:
                    try:
                        os.system("node start")
                    except:
                        print("Cannot run the project")
            elif (args[0] == "java"):

                try:
                    f = open(project_name+".java", "a")
                except:

                    print("Cannot find the source code.")
                    sys.exit(1)
                
                os.system("javac "+project_name+".java")
                os.system("java "+project_name)
            elif (args[0] == "clang"):

                try:
                    f = open(project_name+".c", "a")
                except:

                    print("Cannot find the source code.")
                    sys.exit(1)
                
                os.system("gcc *.c -o main.exe")
                os.system("main.exe")
            elif (args[0] == "cpp"):

                try:
                    f = open(project_name+".cpp", "a")
                except:

                    print("Cannot find the source code.")
                    sys.exit(1)
                
                os.system("g++ *.cpp -o main.exe")
                os.system("main.exe")

            elif (args[0] == "js"):

                try:
                    f = open(project_name+".js", "a")
                except:

                    print("Cannot find the source code.")
                    sys.exit(1)
                
                try:
                    os.system("nodemon "+project_name+".js")
                except:
                    try:
                        os.system("node "+project_name+".js")
                    except:
                        print("Cannot run the project")
            elif args[0]=="kp":
                os.system("packages\dist\main\main.exe src\\"+project_name+".kp")
            else:
                print("Expected project type in range (js, clang, cpp, cs, node, web3)")
                sys.exit(0)


        elif action == "create":
            print(os.path.abspath(__file__)[:-10])
            print("Creating the project...")
            time.sleep(2.5)
            print("Building required files...")

            if (args[0] == "web3"):
                os.system(f"tar -x -f \"{os.path.abspath(__file__)[:-10]}..\..\Models\Web3.rar \" ")
            elif (args[0] == "node"):
                os.system(f"tar -x -f \"{os.path.abspath(__file__)[:-10]}..\..\Models\MEN.zip \" ")
            elif (args[0] == "java"):
                try:
                    f = open(project_name+".java", "w")
                except:
                    print("Error : Invalid java project name")
                text = "public class "+project_name+"\n{\n\tpublic static void main(String[] args)\n\t{\n\t\tSystem.out.println(\"Hello World\");\n\t}\n}"
                f.write(text)
                f.close()
            elif (args[0] == "clang"):
                try:
                    f = open(project_name+".c", "w")
                except:
                    print("Error : Invalid c project name")
                text = "#include <stdio.h>\n#include <stdlib.h>\n\nvoid main(void)\n{\n\tprintf(\"Hello World\");\n}"
                f.write(text)
                f.close()
            elif (args[0] == "cpp"):
                try:
                    f = open(project_name+".cpp", "w")
                except:
                    print("Error : Invalid c++ project name")
                text = "#include <iostream>\nint main()\n{\n\tstd::cout << \"Hello World\" << std::endl;\n}"
                f.write(text)
                f.close()
            elif (args[0] == "cs"):
                try:
                    f = open(project_name+".cs", "w")
                except:
                    print("Error : Invalid csharp project name")
                text = "void main()\n{\n\tConsole.WriteLine(\"Hello World\");\n}"
                f.write(text)
                f.close()
            elif (args[0] == "js"):
                try:
                    f = open(project_name+".js", "w")
                except:
                    print("Error : Invalid javascript project name")
                text = "function main()\n{\n\tconsole.log(\"Hello World\");\n}\n\nmain();"
                f.write(text)
                f.close()
            elif (args[0] == "kp"):
                
                os.system(f"tar -x -f \"{os.path.abspath(__file__)[:-10]}..\..\Models\Kpiro.rar \" ")
                os.system("mkdir src")
                try:
                    f = open("src\\"+project_name+".kp", "w")
                except:
                    print("Error : Invalid javascript project name")
                text = "display(\"Hello World\")"
                f.write(text)
                f.close()
            else:
                print("Expected project type in range (js, clang, cs, cpp, node, web3, kp)")
                sys.exit(0)
            try:
                os.system("code .")
            except:
                print("Error : Can't open the folder with vscode")
            

if __name__ == '__main__':
    main()